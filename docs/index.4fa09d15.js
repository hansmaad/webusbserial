class _{#_=0;#e=1;#t=2;#T=3;#i=4;#I=5;#S=6;#n=7;#E=9;#s=10;#r=11;#D=12;#F=144;#o=0;#c=1;#O=2;#R=4;#a=8;#d=16;#h=32;#A=64;#u=1;#l=2;#v=3;#M=4;#B=0;#f=1;#p=2;#C=3;#L=this.#_;#U="vendor";#m=0;#y=1;#N=2;#b=3;#P={SIO:1,FT8U232AM:2,FT232BM:3,FT2232C:4,FT232RL:5,FT2232H:6,FT4232H:7,FT232H:8,FTX:9};#g={ftdi_sio_b300:0,ftdi_sio_b600:1,ftdi_sio_b1200:2,ftdi_sio_b2400:3,ftdi_sio_b4800:4,ftdi_sio_b9600:5,ftdi_sio_b19200:6,ftdi_sio_b38400:7,ftdi_sio_b57600:8,ftdi_sio_b115200:9};#H=this.#i;#w=0;#Q=256;#Y=512;#G=768;#q=1024;#K=0;#X=2048;#V=4096;#W=16384;#k=this.#e;#x=1;#j=this.#x<<8|1;#$=this.#x<<8|0;#z=2;#J=this.#z<<8|2;#Z=this.#z<<8|0;#__=this.#t;#e_=0;#t_=256;#T_=512;#i_=1024;#I_=this.#s;#S_=this.#E;#n_=this.#S;#E_=this.#I;#s_=16;#r_=32;#D_=64;#F_=128;#o_=this.#r;#c_=0;#O_=32;#R_=this.#D;#a_=this.#F;#d_=8;#h_=10;#A_=16;#u_=32;#l_=64;#v_=128;#M_=1;#B_=2;#f_=4;#p_=8;#C_=16;#L_=32;#U_=64;#m_=128;constructor(_){this.device=_,this.interfaceNumber=0,this.endpointIn=0,this.endpointOut=0,this.modemStatusByte=0,this.lineStatusByte=0,this.packetsReceived=0}connect(_,e){this.onReceive=_,this.onReceiveError=e;let t=()=>{this.device.transferIn(this.endpointIn,64).then((_=>{let e=new Uint8Array(_.data.buffer);if(e[0]!=this.modemStatusByte&&(this.modemStatusByte=e[0]),e[1]!=this.lineStatusByte&&(this.lineStatusByte=e[1]),e.length>2){let _=new Uint8Array(e.length-2);for(let t=2;t<e.length;t++)_[t-2]=e[t];_.find((_=>0!==_))&&this.onReceive(_)}else this.packetsReceived=this.packetsReceived+1;t()}),(_=>{this.onReceiveError(_)}))};return this.device.open().then((()=>{if(null===this.device.configuration)return this.device.selectConfiguration(1)})).then((()=>{this.device.configuration.interfaces.forEach((_=>{_.alternates.forEach((e=>{console.log(e),255==e.interfaceClass&&(this.interfaceNumber=_.interfaceNumber,e.endpoints.forEach((_=>{"out"==_.direction&&(this.endpointOut=_.endpointNumber),"in"==_.direction&&(this.endpointIn=_.endpointNumber)})))}))}))})).then((()=>this.device.claimInterface(this.interfaceNumber))).then((()=>this.device.selectAlternateInterface(this.interfaceNumber,0))).then((()=>{this.device.controlTransferOut({requestType:"vendor",recipient:"device",request:this.#T,value:this.getBaudDivisor(19200),index:this.getBaudBase()})})).then((()=>this.device.controlTransferIn({requestType:"vendor",recipient:"device",request:this.#I_,value:0,index:0},1))).then((_=>{if(this.device.latencyTimer=new Uint8Array(_.data.buffer)[0],1!=this.device.latencyTimer)return this.device.controlTransferOut({requestType:"vendor",recipient:"device",request:this.#S_,value:1,index:0})})).then((_=>this.device.latencyTimer=this.device.controlTransferIn({requestType:"vendor",recipient:"device",request:this.#I_,value:0,index:0},1))).then((_=>(this.device.latencyTimer=new Uint8Array(_.data.buffer)[0],console.log("Current Latency Timer: "),console.log(this.device.latencyTimer),t(),this.device)))}DIV_ROUND_CLOSEST(_,e){return _-1>0||e-1>0||_>0==e>0?(_+e/2)/e:(_-e/2)/e}getBaudBase(){return 48e6}getBaudDivisor(_){let e=this.getBaudBase();let t=0,T=this.DIV_ROUND_CLOSEST(e,2*_);return t=T>>3,t|=[0,3,2,4,1,5,6,7][7&T]<<14,1==t?t=0:16385==t&&(t=1),t}send(_){return this.device.transferOut(this.endpointOut,_)}disconnect(){this.device.close()}}class e{constructor(_){if(!("usb"in navigator))throw new Error("USB Support not available!");this.configuration=_||{overridePortSettings:!1,baudrate:9600,bits:8,stop:1,parity:!1,deviceFilters:[]},this.devices=[]}async getAvailablePorts(){return this.devices=await navigator.usb.getDevices(),this.devices.map((e=>new _(e)))}async requestNewPort(){try{let e=await navigator.usb.requestDevice({filters:this.configuration.deviceFilters||[]});return e in this.devices||this.devices.push(e),new _(e)}catch(_){throw new Error(_)}}}let t;document.getElementById("requestFTDI").addEventListener("click",(async function(){const _=document.getElementById("outFTDI"),T=document.createElement("input");T.type="text",T.placeholder="HEX, eg. 01 03 00 FF",T.style.margin="1em 0",T.value="01 03 00 34 00 01 C5 C4";const i=document.createElement("button");i.type="button",i.innerHTML="Send",_.parentElement.insertBefore(T,_),_.parentElement.insertBefore(i,_);try{_.innerHTML="";const I=new e({overridePortSettings:!0,baud:19200,bits:8,stop:1,parity:!1}),S=t=await I.requestNewPort();await S.connect((e=>{_.innerHTML+="Rec: "+e.join(", ")+"\n"})),i.addEventListener("click",(()=>{const e=T.value.split(" ").map((_=>parseInt(_,16)));_.innerHTML+=`Send ${e.map((_=>_.toString(16))).join(", ")}\n`;const t=new Uint8Array([0,0,0,...e,0,0,0]);S.send(t)}))}catch(e){_.innerHTML=e.message}}));
//# sourceMappingURL=index.4fa09d15.js.map
